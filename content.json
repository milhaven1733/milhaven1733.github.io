[{"title":"MySQL-学习笔记-3","date":"2017-04-16T01:23:42.000Z","path":"2017/04/16/MySQL-学习笔记-3/","text":"MySQL约束及修改数据表外键约束的要求解析约束 根据约束针对字段多少： 针对一个字段——列级约束 针对多个字段——表级约束 外键约束 注：当外键列无索引时，MySQL自动创建索引，而当参照列无索引时，不会自动创建。 查看MySQL当前提供引擎 1mysql&gt; show engines; 查看MySQL默认存储引擎 123456789mysql&gt; show variables like &apos;%storage_engine%&apos;;+----------------------------------+--------+| Variable_name | Value |+----------------------------------+--------+| default_storage_engine | InnoDB || default_tmp_storage_engine | InnoDB || disabled_storage_engines | || internal_tmp_disk_storage_engine | InnoDB |+----------------------------------+--------+ 创建父表： 1234mysql&gt; CREATE TABLE provinces( -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT, -&gt; pname VARCHAR(20) NOT NULL -&gt; ); 查看创建父表时的存储引擎： 12345678910mysql&gt; SHOW CREATE TABLE provinces;+-----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| Table | Create Table |+-----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| provinces | CREATE TABLE `provinces` ( `id` smallint(5) unsigned NOT NULL AUTO_INCREMENT, `pname` varchar(20) NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 |+-----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 创建子表（错误示例） 1234567mysql&gt; CREATE TABLE user( -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT, -&gt; username VARCHAR(10) NOT NULL, -&gt; pid BIGINT, -&gt; FOREIGN KEY (pid) REFERENCES provinces (id) -&gt; );ERROR 1215 (HY000): Cannot add foreign key constraint 可见，外键列必须与主键保持相同数据类型 创建子表： 123456mysql&gt; CREATE TABLE users( -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT, -&gt; username VARCHAR(10) NOT NULL, -&gt; pid SMALLINT UNSIGNED, -&gt; FOREIGN KEY (pid) REFERENCES provinces (id) -&gt; ); 查看子表创建时的引擎和外键的创建： 12345678910111213mysql&gt; SHOW CREATE TABLE users;+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| Table | Create Table |+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| users | CREATE TABLE `users` ( `id` smallint(5) unsigned NOT NULL AUTO_INCREMENT, `username` varchar(10) NOT NULL, `pid` smallint(5) unsigned DEFAULT NULL, PRIMARY KEY (`id`), KEY `pid` (`pid`), CONSTRAINT `users_ibfk_1` FOREIGN KEY (`pid`) REFERENCES `provinces` (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 |+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 查看父表索引： 123456789101112131415mysql&gt; SHOW INDEXES FROM provinces\\G*************************** 1. row *************************** Table: provinces Non_unique: 0 Key_name: PRIMARY Seq_in_index: 1 Column_name: id Collation: A Cardinality: 0 Sub_part: NULL Packed: NULL Null: Index_type: BTREE Comment: Index_comment: 可见：参照列 ‘id’ 为主键，已自动创建索引 \\G表示以网格形式显示 查看子表索引 1234567891011121314151617181920212223242526272829mysql&gt; SHOW INDEXES FROM users\\G*************************** 1. row *************************** Table: users Non_unique: 0 Key_name: PRIMARY Seq_in_index: 1 Column_name: id Collation: A Cardinality: 0 Sub_part: NULL Packed: NULL Null: Index_type: BTREE Comment: Index_comment: *************************** 2. row *************************** Table: users Non_unique: 1 Key_name: pid Seq_in_index: 1 Column_name: pid Collation: A Cardinality: 0 Sub_part: NULL Packed: NULL Null: YES Index_type: BTREE Comment: Index_comment: 可见，子表存在两个索引：子表主键的索引以及外键的索引 外键约束的参照操作 创建子表，指定外键的参照操作： 123456mysql&gt; CREATE TABLE user1( -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT, -&gt; username VARCHAR(10) NOT NULL, -&gt; pid SMALLINT UNSIGNED, -&gt; FOREIGN KEY (pid) REFERENCES provinces (id) ON DELETE CASCADE -&gt; ); 在父表中插入记录 1234567891011121314151617mysql&gt; INSERT provinces(pname) VALUE(&apos;A&apos;);Query OK, 1 row affected (0.06 sec)mysql&gt; INSERT provinces(pname) VALUE(&apos;B&apos;);Query OK, 1 row affected (0.04 sec)mysql&gt; INSERT provinces(pname) VALUE(&apos;C&apos;);Query OK, 1 row affected (0.09 sec)mysql&gt; SELECT * FROM provinces;+----+-------+| id | pname |+----+-------+| 1 | A || 2 | B || 3 | C |+----+-------+ 在子表中插入记录 12mysql&gt; INSERT user1(username,pid) VALUES(&apos;Tom&apos;,3);Query OK, 1 row affected (0.03 sec) 12mysql&gt; INSERT user1(username,pid) VALUES(&apos;John&apos;,5);ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`lcyDB`.`user1`, CONSTRAINT `user1_ibfk_1` FOREIGN KEY (`pid`) REFERENCES `provinces` (`id`) ON DELETE CASCADE) 可见：外键列不能设为父表中参照列不存在的值 123456789101112mysql&gt; INSERT user1(username,pid) VALUES(&apos;John&apos;,1);Query OK, 1 row affected (0.05 sec)mysql&gt; INSERT user1(username,pid) VALUES(&apos;Rose&apos;,2);Query OK, 1 row affected (0.05 sec)mysql&gt; SELECT * FROM user1;+----+----------+------+| id | username | pid |+----+----------+------+| 1 | Tom | 3 || 4 | John | 1 || 5 | Rose | 2 |+----+----------+------+ 删除父表中某记录，查看子表相应行是否改变： 123456789mysql&gt; DELETE FROM provinces WHERE id=3;Query OK, 1 row affected (0.05 sec)mysql&gt; SELECT * FROM user1;+----+----------+------+| id | username | pid |+----+----------+------+| 4 | John | 1 || 5 | Rose | 2 |+----+----------+------+ 可见：子表已自动删除id为３的记录 但因为物理的外键约束只有INNODB引擎才支持，在实际的开发过程中，我们很少使用物理的外键约束，大多使用逻辑的外键约束。所以说，我们在实际的项目开发中，一般定义逻辑的外键，指的是在定义两张表结构时，按照存在的某种结构的方式去定义，但是不使用FOREIGN KEY这个关键词 表级约束和列级约束 如之前创建的外键约束为列级约束，可以在列定义时声明 在实际开发中，用列级约束比较多，表级约束很少用。 修改数据表——添加\\删除列添加单列 ALTER TABLE table_name ADD [COLUMN] col_name colume_definition [FIRST|AFTER col_name] 如： 123456789101112mysql&gt; ALTER TABLE user1 ADD age TINYINT UNSIGNED NOT NULL DEFAULT 10;Query OK, 0 rows affected (0.68 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; SHOW COLUMNS FROM user1;+----------+----------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------+------+-----+---------+----------------+| id | smallint(5) unsigned | NO | PRI | NULL | auto_increment || username | varchar(10) | NO | | NULL | || pid | smallint(5) unsigned | YES | MUL | NULL | || age | tinyint(3) unsigned | NO | | 10 | |+----------+----------------------+------+-----+---------+----------------+ 指定AFTER: 1234567891011121314mysql&gt; ALTER TABLE user1 ADD password VARCHAR(20) NOT NULL AFTER username;Query OK, 0 rows affected (0.76 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; SHOW COLUMNS FROM user1;+----------+----------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------+------+-----+---------+----------------+| id | smallint(5) unsigned | NO | PRI | NULL | auto_increment || username | varchar(10) | NO | | NULL | || password | varchar(20) | NO | | NULL | || pid | smallint(5) unsigned | YES | MUL | NULL | || age | tinyint(3) unsigned | NO | | 10 | |+----------+----------------------+------+-----+---------+----------------+5 rows in set (0.00 sec) 指定FIRST: 123456789101112131415mysql&gt; ALTER TABLE user1 ADD truename VARCHAR(20) NOT NULL FIRST;Query OK, 0 rows affected (0.96 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; SHOW COLUMNS FROM user1;+----------+----------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------+------+-----+---------+----------------+| truename | varchar(20) | NO | | NULL | || id | smallint(5) unsigned | NO | PRI | NULL | auto_increment || username | varchar(10) | NO | | NULL | || password | varchar(20) | NO | | NULL | || pid | smallint(5) unsigned | YES | MUL | NULL | || age | tinyint(3) unsigned | NO | | 10 | |+----------+----------------------+------+-----+---------+----------------+6 rows in set (0.00 sec) 添加多列：（不能指定位置关系） 1ALTER TABLE table_name ADD [COLUMN] (col_name column_definition,...) 删除列 1ALTER TABLE table_name DROP [COLUMN] (col_name) 如： 12345678910111213mysql&gt; ALTER TABLE user1 DROp truename;Query OK, 0 rows affected (0.69 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; SHOW COLUMNS FROM user1;+----------+----------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------+------+-----+---------+----------------+| id | smallint(5) unsigned | NO | PRI | NULL | auto_increment || username | varchar(10) | NO | | NULL | || password | varchar(20) | NO | | NULL | || pid | smallint(5) unsigned | YES | MUL | NULL | || age | tinyint(3) unsigned | NO | | 10 | |+----------+----------------------+------+-----+---------+----------------+ 删除多列 1ALTER TABLE table_name DROP col_name1,DROP col_name2,... 删除同时添加 1ALTER TABLE table_name DROP col_name1,ADD col_name2,... 修改数据表——添加\\删除约束**添加主键约束： 1ALTER TABLE table_name ADD[CONSTRAINT[symbol]] PRIMARY KEY [index_type] (index_col_name,...) 可选项：CONSTRAINT[symbol] 可以为主键设定名字，index_type指定索引类型 如： 1234567891011121314mysql&gt; CREATE TABLE user2( -&gt; username VARCHAR(10) NOT NULL, -&gt; pid SMALLINT UNSIGNED -&gt; );mysql&gt; ALTER TABLE user2 ADD id SMALLINT UNSIGNED;mysql&gt; ALTER TABLE user2 ADD CONSTRAINT PK_user2_id PRIMARY KEY(id);mysql&gt; SHOW COLUMNS FROM user2;+----------+----------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------+------+-----+---------+-------+| username | varchar(10) | NO | | NULL | || pid | smallint(5) unsigned | YES | | NULL | || id | smallint(5) unsigned | NO | PRI | NULL | |+----------+----------------------+------+-----+---------+-------+ 添加唯一约束 1ALTER TABLE table_name ADD[CONSTRAINT[symbol]] UNIQUE [INDEX|KEY] [index_name][index_type] (index_col_name,...) 如： 123456789mysql&gt; ALTER TABLE user2 ADD UNIQUE (username);mysql&gt; SHOW COLUMNS FROM user2;+----------+----------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------+------+-----+---------+-------+| username | varchar(10) | NO | UNI | NULL | || pid | smallint(5) unsigned | YES | | NULL | || id | smallint(5) unsigned | NO | PRI | NULL | |+----------+----------------------+------+-----+---------+-------+ 添加外键约束 1ALTER TABLE table_name ADD[CONSTRAINT[symbol]] FOREIGN KEY [index_name] (index_col_name,...) reference_definition 如： 1234567891011mysql&gt; ALTER TABLE user2 ADD FOREIGN KEY (pid) PEFERENCES provinces(id);mysql&gt; SHOW CREATE TABLE user2;| user2 | CREATE TABLE `user2` ( `username` varchar(10) NOT NULL, `pid` smallint(5) unsigned DEFAULT NULL, `id` smallint(5) unsigned NOT NULL, PRIMARY KEY (`id`), UNIQUE KEY `username` (`username`), KEY `pid` (`pid`), CONSTRAINT `user2_ibfk_1` FOREIGN KEY (`pid`) REFERENCES `provinces` (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 | 添加/删除默认约束 1ALTER TABLE table_name ALTER[COLUMN] col_name &#123;SET DEFAULT literal|DROP DEFAULT&#125; 如添加约束： 1234567891011mysql&gt; ALTER TABLE user2 ADD age TINYINT UNSIGNED NOT NULL;mysql&gt; ALTER TABLE user2 ALTER age SET DEFAULT 15;mysql&gt; SHOW COLUMNS FROM user2;+----------+----------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------+------+-----+---------+-------+| username | varchar(10) | NO | UNI | NULL | || pid | smallint(5) unsigned | YES | MUL | NULL | || id | smallint(5) unsigned | NO | PRI | NULL | || age | tinyint(3) unsigned | NO | | 15 | |+----------+----------------------+------+-----+---------+-------+ 删除约束： 12345678910mysql&gt; ALTER TABLE user2 ALTER age DROP DEFAULT;mysql&gt; SHOW COLUMNS FROM user2;+----------+----------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------+------+-----+---------+-------+| username | varchar(10) | NO | UNI | NULL | || pid | smallint(5) unsigned | YES | MUL | NULL | || id | smallint(5) unsigned | NO | PRI | NULL | || age | tinyint(3) unsigned | NO | | NULL | |+----------+----------------------+------+-----+---------+-------+ 删除主键约束 1ALTER TABLE table_name DROP PRIMARY KEY 如： 12345678910mysql&gt; ALTER TABLE user2 DROP PRIMARY KEY;mysql&gt; SHOW COLUMNS FROM user2;+----------+----------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------+------+-----+---------+-------+| username | varchar(10) | NO | PRI | NULL | || pid | smallint(5) unsigned | YES | MUL | NULL | || id | smallint(5) unsigned | NO | | NULL | || age | tinyint(3) unsigned | NO | | NULL | |+----------+----------------------+------+-----+---------+-------+ 删除唯一约束 1ALTER TABLE table_name DROP &#123;INDEX|KEY&#125; index_name 指定索引名称是因为一张表可以有多个唯一约束，需要删除字段上的约束而非字段本身就要知道约束名称加以限定。 查看索引名称： 1mysql&gt; SHOW INDEXES FROM user2\\G 得到 唯一约束column的Key_name: username 删除约束： 1mysql&gt; ALTER TABLE user2 DROP INDEX username; 查看数据表： 123456789mysql&gt; SHOW COLUMNS FROM user2;+----------+----------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------+------+-----+---------+-------+| username | varchar(10) | NO | | NULL | || pid | smallint(5) unsigned | YES | MUL | NULL | || id | smallint(5) unsigned | NO | | NULL | || age | tinyint(3) unsigned | NO | | NULL | |+----------+----------------------+------+-----+---------+-------+ 唯一约束已删除 删除外键约束 1mysql&gt; ALTER TABLE user2 DROP FOREIGN KEY fk_symbol; 需查看外键的fk_symbol（系统指定）： 1234mysql&gt; SHOW CREATE TABLE user2;得到：KEY `pid` (`pid`), CONSTRAINT `user2_ibfk_1` FOREIGN KEY (`pid`) REFERENCES `provinces` (`id`) 即：fk_symbol为‘user2_ibfk_1’ 删除约束： 1mysql&gt; ALTER TABLE user2 DROP FOREIGN KEY user2_ibfk_1; 还可以继续删除索引： 123mysql&gt; ALTER TABLE user2 DROP INDEX pid;mysql&gt; SHOW INDEXES FROM user2\\GEmpty set (0.00 sec) 修改列定义和更名数据表修改列定义 1ALTER TABLE table_name MODIFY col_name column_definition [FIRST|AFTER col_name] 备选项：可以修改字段位置，如： 12345678910mysql&gt; ALTER TABLE user2 MODIFY id SMALLINT UNSIGNED NOT NULL FIRST;mysql&gt; SHOW COLUMNS FROM user2;+----------+----------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------+------+-----+---------+-------+| id | smallint(5) unsigned | NO | | NULL | || username | varchar(10) | NO | | NULL | || pid | smallint(5) unsigned | YES | | NULL | || age | tinyint(3) unsigned | NO | | NULL | |+----------+----------------------+------+-----+---------+-------+ 修改字段数据类型： 12345678910mysql&gt; ALTER TABLE user2 MODIFY id TINYINT UNSIGNED NOT NULL;mysql&gt; SHOW COLUMNS FROM user2;+----------+----------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+----------------------+------+-----+---------+-------+| id | tinyint(3) unsigned | NO | | NULL | || username | varchar(10) | NO | | NULL | || pid | smallint(5) unsigned | YES | | NULL | || age | tinyint(3) unsigned | NO | | NULL | |+----------+----------------------+------+-----+---------+-------+ 但注意：将数据类型修改为更小类型时可能会造成数据丢失。 修改列名称： 1ALTER TABLE table_name CHANGE old_col_name new_col_name column_definition [FIRST|AFTER col_name] 即可修改列名称，也可修改列定义。 如： 12345678910mysql&gt; ALTER TABLE user2 CHANGE pid p_id TINYINT UNSIGNED NOT NULL;mysql&gt; SHOW COLUMNS FROM user2;+----------+---------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+---------------------+------+-----+---------+-------+| id | tinyint(3) unsigned | NO | | NULL | || username | varchar(10) | NO | | NULL | || p_id | tinyint(3) unsigned | NO | | NULL | || age | tinyint(3) unsigned | NO | | NULL | |+----------+---------------------+------+-----+---------+-------+ 数据表更名 123ALTER TABLE table_name RENAME[TO|AS] new_table_name或：RENAME TABLE table_name TO new_table_name 如： 1234567891011121314151617181920212223242526272829303132mysql&gt; ALTER TABLE user2 RENAME user3;mysql&gt; SHOW TABLES;+-----------------+| Tables_in_lcyDB |+-----------------+| provinces || tb1 || tb2 || tb3 || tb4 || tb5 || tb6 || user1 || user3 || users |+-----------------+mysql&gt; ALTER TABLE user3 RENAME user2;mysql&gt; SHOW TABLES;+-----------------+| Tables_in_lcyDB |+-----------------+| provinces || tb1 || tb2 || tb3 || tb4 || tb5 || tb6 || user1 || user2 || users |+-----------------+ 注意： 要尽量少使用列和表的更名，如果之前创建了索引或视图，引用了表名或列名，修改名称可能会导致视图或存储过程无法正常工作。","tags":[]},{"title":"MySQL-学习笔记-2","date":"2017-04-12T10:12:57.000Z","path":"2017/04/12/MySQL-学习笔记-2/","text":"数据类型及数据表操作数据类型数据类型决定存储格式 要根据实际应用来选择最合适的数据类型 整型 浮点型 日期时间型 通常用数字类型取代日期时间或进行时间戳转换 字符型 注： CHAR(M)为定长类型 VARCHAR 为变长类型 L+1或L+2里多出来的字节用来保存数据值长度 ENUM表示从枚举的值中选择其一 SET表示从成员中进行排列组合形成其值 数据表操作创建数据表数据表是数据库中其他对象的基础 关系性数据库——二维表格——数据表 行——记录 列——字段 打开数据库 USE 数据库名称; SELECT DATABASE()； 显示当前使用的数据库 创建数据表 CREATE TABLE table_name( ​ column_name data_type, ​ …… ) e.g. 123456&gt; mysql&gt; CREATE TABLE tb1(&gt; -&gt; username VARCHAR(20),&gt; -&gt; age TINYINT UNSIGNED,&gt; -&gt; salary FLOAT(8,2) UNSIGNED &gt; -&gt; );&gt; &gt; Query OK, 0 rows affected (0.35 sec) 查看数据表 **SHOW TABLES[FROM db_name] [LIKE ‘pattern’| WHERE expr] 注：此命令可查询其他数据库中的表且不改变当前所处数据库，如： mysql&gt; show tables from mysql; +—————————+ | Tables_in_mysql |+—————————+| columns_priv || db || engine_cost || event | 第二行涉及通配符，暂略 查看数据表结构 SHOW COLUMNS FROM table_name; 如： mysql&gt; show columns from tb1;+———-+———————+——+—–+———+——-+| Field | Type | Null | Key | Default | Extra |+———-+———————+——+—–+———+——-+| username | varchar(20) | YES | | NULL | || age | tinyint(3) unsigned | YES | | NULL | || salary | float(8,2) unsigned | YES | | NULL | |+———-+———————+——+—–+———+——-+3 rows in set (0.01 sec) 记录插入与查找插入记录 INSERT [INTO] tb1_name [(col_name,…)] VALUES(val,…) 如： mysql&gt; INSERT tb1 VALUES(‘TOM’,25,7825.37);Query OK, 1 row affected (0.07 sec) mysql&gt; INSERT tb1(username,salary) VALUES(‘Jphn’,6825.37);Query OK, 1 row affected (0.04 sec) 查找记录 SELECT expr,… FROM table_name 如： mysql&gt; SELECT * FROM tb1;+———-+——+———+| username | age | salary |+———-+——+———+| TOM | 25 | 7825.37 || Jphn | NULL | 6825.37 |+———-+——+———+ 注：*是对字段的过滤而非对记录的过滤 空值与非空创建表格时指定某字段的值是否可以为空： NULL,字段值可以为空 NOT NULL，字段值禁止为空 mysql&gt; CREATE TABLE tb2(-&gt; username VARCHAR(20) NOT NULL,-&gt; age TINYINT UNSIGNED NULL-&gt; ); mysql&gt; SHOW COLUMNS FROM tb2;+———-+———————+——+—–+———+——-+| Field | Type | Null | Key | Default | Extra |+———-+———————+——+—–+———+——-+| username | varchar(20) | NO | | NULL | || age | tinyint(3) unsigned | YES | | NULL | |+———-+———————+——+—–+———+——-+ mysql&gt; INSERT tb2 VALUES(NULL,26);ERROR 1048 (23000): Column ‘username’ cannot be null 自动编号保证某条记录的唯一性——记录自动编号 即自动编号字段必须定义为数值类型，且定义为主键 如设计错误的定义： mysql&gt; CREATE TABLE tb3( -&gt; -&gt;id SMALLINT UNSIGNED AUTO_INCREMENT, -&gt; username VARCHAR(30) NOT NULL -&gt;); ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key 初涉主键约束 如修改上述记录： 123mysql&gt; CREATE TABLE tb3(-&gt; id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,-&gt; username VARCHAR(30) NOT NULL -&gt; ); mysql&gt; SHOW COLUMNS FROM tb3;+———-+———————-+——+—–+———+—————-+| Field | Type | Null | Key | Default | Extra |+———-+———————-+——+—–+———+—————-+| id | smallint(5) unsigned | NO | PRI | NULL | auto_increment || username | varchar(30) | NO | | NULL | |+———-+———————-+——+—–+———+—————-+ 自动编号示例： mysql&gt; INSERT tb3(username) VALUES(‘XueXue’);Query OK, 1 row affected (0.05 sec) mysql&gt; INSERT tb3(username) VALUES(‘TuTu’);Query OK, 1 row affected (0.06 sec) mysql&gt; INSERT tb3(username) VALUES(‘JingJing’);Query OK, 1 row affected (0.02 sec) mysql&gt; INSERT tb3(username) VALUES(‘GaiGai’);Query OK, 1 row affected (0.05 sec) mysql&gt; SELECT * FROM tb3;+—-+———-+| id | username |+—-+———-+| 1 | XueXue || 2 | TuTu || 3 | JingJing || 4 | GaiGai |+—-+———-+ 主键不一定要定义为自动编号，如： mysql&gt; CREATE TABLE tb4(-&gt; id SMALLINT UNSIGNED PRIMARY KEY,-&gt; username VARCHAR(20) NOT NULL-&gt; );Query OK, 0 rows affected (0.36 sec) mysql&gt; SHOW COLUMNS FROM tb4;+———-+———————-+——+—–+———+——-+| Field | Type | Null | Key | Default | Extra |+———-+———————-+——+—–+———+——-+| id | smallint(5) unsigned | NO | PRI | NULL | || username | varchar(20) | NO | | NULL | |+———-+———————-+——+—–+———+——-+ 主键字段具有唯一性： mysql&gt; INSERT tb4 VALUES(22,’Tom’);Query OK, 1 row affected (0.05 sec) mysql&gt; INSERT tb4 VALUES(22,’John’);ERROR 1062 (23000): Duplicate entry ‘22’ for key ‘PRIMARY’ 初涉唯一约束 第二三条看似相悖，实际上一张表只允许存在一个值为空的唯一约束字段 创建示例： 12345mysql&gt; CREATE TABLE tb5(-&gt; id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,-&gt; username VARCHAR(20) NOT NULL UNIQUE KEY,-&gt; age TINYINT UNSIGNED-&gt; ); mysql&gt; SHOW COLUMNS FROM tb5;+———-+———————-+——+—–+———+—————-+| Field | Type | Null | Key | Default | Extra |+———-+———————-+——+—–+———+—————-+| id | smallint(5) unsigned | NO | PRI | NULL | auto_increment || username | varchar(20) | NO | UNI | NULL | || age | tinyint(3) unsigned | YES | | NULL | |+———-+———————-+——+—–+———+—————-+ 验证唯一性： mysql&gt; INSERT tb5(username,age) VALUES(‘John’,22);Query OK, 1 row affected (0.05 sec) mysql&gt; INSERT tb5(username,age) VALUES(‘John’,22);ERROR 1062 (23000): Duplicate entry ‘John’ for key ‘username’ 初涉默认约束DEFAULT 创建： mysql&gt; CREATE TABLE tb6(-&gt; id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,-&gt; username VARCHAR(20) NOT NULL UNIQUE KEY,-&gt; sex ENUM(‘1’,’2’,’3’) DEFAULT ‘3’-&gt; ); 查看： mysql&gt; SHOW COLUMNS FROM tb6;+———-+———————-+——+—–+———+—————-+| Field | Type | Null | Key | Default | Extra |+———-+———————-+——+—–+———+—————-+| id | smallint(5) unsigned | NO | PRI | NULL | auto_increment | username varchar(20) NO UNI NULL | sex | enum(‘1’,’2’,’3’) | YES | | 3 | |+———-+———————-+——+—–+———+—————-+ 验证默认约束： mysql&gt; INSERT tb6(username) VALUES(‘Tom’);Query OK, 1 row affected (0.05 sec) mysql&gt; SELECT * FROM tb6;+—-+———-+——+| id | username | sex |+—-+———-+——+| 1 | Tom | 3 |+—-+———-+——+","tags":[]},{"title":"Hello World","date":"2017-04-11T08:21:40.832Z","path":"2017/04/11/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"t检验笔记","date":"2017-04-09T08:17:21.000Z","path":"2017/04/09/t检验笔记/","text":"t检验_第二部分效应量（effect size）实验性研究中，表示处理效应的大小 非实验性研究中，表示变量之间关系强度 t/z检验中效应量衡量指标——均值差异（mean difference） 效应量测量类型差异度量​ 均值差异 ​ 标准化差异度量（standardized differens）——cohen‘s d 相关度量​ $$r^2$$ 表示某个变量的变化比例与另一个变量的关系（一个变量能够“解释”另一个变量的特定变化的比例） 统计显著性在统计学中，“显著性”是指—— rejected the null results are not likely due to chance（sampling error） 即：我们在解释结果时，排除了随机因素/抽样错误 判断调查研究结果是否有意义： 变量是否具有实际意义或社会、理论意义 效应量大小 能否排除抽样错误 能否排除结果对立解释（排除潜在变量影响） Cohen‘s d【标准化均值差异（standardized mean difference）】$$d=\\frac{\\bar x-\\mu}{s}$$ $$x 表示样本均值 ,s表示样本标准差$$ $r^2$ （确定系数）​ 相关度量 表示两个变量之间的关系程度 ​ $$r^2$$ 范围：0~1（数值越大相关性越强） ​ t检验 中计算 $$r^2$$ : ​ $$r^2=\\frac{t^2}{t^2+ df}$$ t为在t检验中获得的值，df为自由度 报告结果描述统计量（文，图，表） 推论统计量（假设检验、置信区间） APA style ​ $$t（df）=x.xx,p=x.xx,direction$$ ​ e.g. $$t(24)=-2.50,p&lt;0.05,one-tailed$$ 报告置信区间：（注明是什么的置信区间） ​ e.g. confidence interval on the mean difference;95% CI=(4,6) 报告效应量： e.g. $$d=x.xx$$ ​ $$r^2=.xx$$ (通常不写0) 完整的单样本t检验t检验置信区间Cohen‘s dr^2公式： ​ $$df=n-1$$ ​ $$SEM(均值标准误差)=\\frac{S}{\\sqrt{n}}$$ ​ $$t=\\frac{x-\\mu}{SEM}$$ ​ $$CI =x+/-margin\\ of\\ error $$ ​ $$margin\\ of\\ error=t_crttical*SEM$$ ​ $$Cohen’s\\ d=\\frac{x-\\mu}{S}$$ ​ $$r^2=\\frac{t^2}{t^2+ df}$$ 过程 自变量、因变量 处理方式 零假设、对立假设 哪种尾检验 自由度 t临界值$$(\\alpha 水平)$$ SEM 均值误差（$$x-\\mu$$） t统计量 t是否在临界区 p值范围（是否大于置信水平） 统计显著性（是/否） 结果是否有意义 Cohen’s d $$r^2$$ 误差范围 置信区间 ​","tags":[]},{"title":"MySQL-学习笔记-1","date":"2017-04-08T16:17:20.000Z","path":"2017/04/09/MySQL-学习笔记-1/","text":"MySQL自启动sudo chkconfig –add mysql 添加服务 netstat -na | grep 3306 看到有监听说明服务启动 或：ps -ef | grep mysqld 检查MySQL服务器是否启动 另： sudo /etc/init.d/mysql start 启动MySQL 服务器 sudo /etc/init.d/mysql stop 或 ./mysqladmin -u root -p shutdown 关闭目前运行的 MySQL 服务器（/usr/bin 目录下） MySQL添加用户、删除用户与授权登录MYSQL： >mysql -u root -p 创建用户： >CREATE USER ‘username’@’localhost’ IDENTIFIED BY ‘password’; 或 INSERT INTO user (host, user,ssl_cipher,x509_issuer,x509_subject) VALUES (‘localhost’, ‘test’,’’,’’,’’); use mysql; UPDATE user SET authentication_string=PASSWORD(‘*‘) WHERE user=’test’; FLUSH PRIVILEGES; 为用户授权: 以ROOT身份登录 >mysql -u root -p 为用户创建一个数据库: >create database *DB; 授权新用户拥有***DB数据库的所有权限: >grant all privileges on ***DB. to \\**@localhost identified by ‘*(password)’; 刷新系统权限表: >flush privileges; 授权新用户拥有所有数据库的某些权限： >grant select,delete,update,create,drop on . to ***@localhost identified by “*“; 查看MYSQL数据库中所有用户: > SELECT DISTINCT CONCAT(‘User: ‘’’,user,’’’@’’’,host,’’’;’) AS query FROM mysql.user; 查看数据库中具体某个用户的权限: >show grants for ‘*‘@’localhost’; 修改MySQL提示符：登录时： mysql -u -p –prompt 提示符 已连接客户端时: >prompt 提示符; 部分参数： 常用命令及语法规范 操作数据库创建数据库： >CREATE DATABASE db_name; 全部参数： 存在warning信息时查看： >SHOW WARNINGS; 查看创建时编码方式： >SHOW CREATE DATABASE db_name; 查看（当前服务器下）数据库列表： >SHOW DATABASES; 修改数据库： 删除数据库： >DROP DATABASE db_name;","tags":[]}]